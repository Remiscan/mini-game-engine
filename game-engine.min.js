export default class Game{constructor(t,e,{canvas:s=document.querySelector("canvas"),html:i=document.querySelector("accessible-elements"),state:n={},actions:a={},levels:o=[],frameRate:r=60}={}){this.canvas=s,this.html=i,this.state=n,this.state.actions=a,this.frameRate=r,this.audioCtx=new(window.AudioContext||window.webkitAudioContext),this.paused=!1,this.mute=!1,this.levels=o,this.currentLevel=null,this.start=t.bind(this),this.update=e.bind(this)}play(){this.initControls(),this.start();const t=function*(){let t=0;for(;;)this.update(),yield t,t++}.bind(this)();setInterval((()=>{this.paused||t.next()}),1e3/this.frameRate)}async loadLevel(t){this.currentLevel=this.levels.find((e=>e.id===t));let e=await Promise.all(this.currentLevel.sounds.map((t=>fetch(`./assets/${t}.mp3`))));e=await Promise.all(e.map((t=>t.arrayBuffer()))),e=await Promise.all(e.map((t=>audioCtx.decodeAudioData(t)))),this.currentLevel.sounds=this.currentLevel.sounds.map(((t,s)=>({id:t,sound:e[s]})))}playSound(t){if(this.mute)return;const e=this.audioCtx.createBufferSource(),s=this.currentLevel.sounds.findIndex((e=>e.id==t));if(-1==s)throw`Sound ${t} doesn't exist`;e.buffer=this.currentLevel.sounds[s].sound,e.connect(this.audioCtx.destination),e.start()}pause(){this.paused=!0}unpause(){this.paused=!1}initControls(){document.addEventListener("keydown",(t=>{const e=t.code||t.key;this.state.actions.filter((t=>t.controls.includes(e))).map((t=>t.active=!0))})),document.addEventListener("keyup",(t=>{const e=t.code||t.key;this.state.actions.filter((t=>t.controls.includes(e))).map((t=>t.active=!1))}))}get currentActions(){return this.state.actions.filter((t=>t.active)).map((t=>t.name))}}export class Level{constructor({sprites:t={},sounds:e=[]}){this.sprites=t,this.sounds=e.map((t=>({id:t,sound:null})))}}