export class Game{constructor(t=function(){},s=function(){},{canvas:e=document.querySelector("canvas"),html:i=document.querySelector("accessible-elements"),state:a={},actions:o={},levels:n=new Set,tickRate:h=60}={}){this.canvas=e.getContext("2d"),this.html=i,this.state=a,this.state.actions=o,this.state.level=null,this.width=e.width,this.height=e.height,this.audioCtx=null,this.paused=!1,this.mute=!1,this.levels=n,this.start=t.bind(this),this.tickRate=h;const c=1e3/this.tickRate;const r=new Worker(URL.createObjectURL(new Blob(["computing = false; port = null; update =",s.toString(),"; onmessage =",function(t){if(self.computing)return;const s=JSON.parse(t.data);if("init"===s.type)return void(self.port=t.ports[0]);self.computing=!0;const{state:e,actions:i,ticks:a}=s,o=self.update(e,i,a);self.port.postMessage(JSON.stringify(o)),self.computing=!1}.toString()],{type:"text/javascript"}))),d=new MessageChannel;r.postMessage(JSON.stringify({type:"init"}),[d.port2]),d.port1.onmessage=t=>this.state=JSON.parse(t.data);const l=t=>{t<=0||(this.lastTick+=t*c,r.postMessage(JSON.stringify({state:this.state,actions:this.currentActions,ticks:t})))};this.gameLoop=function t(s){if(this.stopLoop=window.requestAnimationFrame(t.bind(this)),this.paused)return;let e=0;if(s>this.lastTick+c){const t=s-this.lastTick;e=Math.floor(t/c)}l(e),this.render(),this.lastRender=s}.bind(this)}play(){this.initControls(),this.audioCtx=new(AudioContext||webkitAudioContext),this.lastTick=performance.now(),this.lastRender=this.lastTick,this.start(),this.gameLoop(performance.now())}render(){this.canvas.clearRect(0,0,this.width,this.height);const t=this.state.level.camera,s=this.state.level.objects.sort(((t,s)=>t.z<s.z?-1:t.z>s.z?1:0));for(const e of s){const s=this.position.x-t.x,i=this.position.y-t.y;s<-e.width||i<-e.height||s>this.width||i>this.height||(e.sprite?canvas.drawImage(this.sprite,s,i,this.width,this.height):e.draw())}}addLevel(...t){const s=new Level(this,...t);this.levels.add(s)}async playLevel(t){this.pause=!0;const s=this.levels.find((s=>s.id===t));await s.play(),this.game.state.level=s,this.pause=!1}playSound(t){if(this.mute)return;const s=this.audioCtx.createBufferSource(),e=this.state.level.sounds.findIndex((s=>s.id==t));if(-1==e)throw`Sound ${t} doesn't exist`;s.buffer=this.state.level.sounds[e].sound,s.connect(this.audioCtx.destination),s.start()}pause(){this.paused=!0}unpause(){this.paused=!1}initControls(){document.addEventListener("keydown",(t=>{const s=t.code||t.key;this.state.actions.filter((t=>t.controls.includes(s))).map((t=>t.active=!0))})),document.addEventListener("keyup",(t=>{const s=t.code||t.key;this.state.actions.filter((t=>t.controls.includes(s))).map((t=>t.active=!1))}))}get currentActions(){return this.state.actions.filter((t=>t.active)).map((t=>t.name))}}class Level{constructor(t,s=function(){},e=function(){},{width:i=null,height:a=null,objects:o=new Set,sounds:n=[]}){this.width=i||t.width,this.height=a||t.height,this.objects=o,this.sounds=n.map((t=>({id:t,sound:null}))),this.cameraCoordinates={x:0,y:0,z:0,angle:0,perspective:0},this.start=s.bind(this),this.update=e.bind(this)}async load(){let t=await Promise.all(this.sounds.map((t=>fetch(`./assets/${t}.mp3`))));t=await Promise.all(t.map((t=>t.arrayBuffer()))),t=await Promise.all(t.map((t=>audioCtx.decodeAudioData(t)))),this.sounds=this.sounds.map(((s,e)=>({id:s,sound:t[e]})))}async play(){await this.load(),this.start()}addObject(...t){const s=new GameObject(this,...t);this.objects.add(s)}set camera({x:t,y:s,z:e=0,angle:i=0}={}){const a=Object.assign({},this.cameraCoordinates);this.cameraCoordinates={x:t,y:s,z:e,angle:i};const o=a.x-this.cameraCoordinates.x,n=a.y-this.cameraCoordinates.y,h=a.z-this.cameraCoordinates.z;a.angle,this.cameraCoordinates.angle;for(const t of this.objects)t.moveTo(t.position.x+o,t.position.y+n,t.position.z+h)}get camera(){return this.cameraCoordinates}}class GameObject{constructor({x:t=0,y:s=0,z:e=0,width:i=0,height:a=0,sprite:o=null,draw:n=(()=>{}),collision:h=!1,damage:c=!1}){this.position={x:t,y:s,z:e},this.destination={x:t,y:s,z:e},this.speed=0,this.width=i,this.height=a,this.sprite=o,this.draw=n,this.collision=h,this.damage=c}moveTo(t,s,e){}}