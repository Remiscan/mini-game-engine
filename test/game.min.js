import*as GEM from"../game-engine.js";const actions={jump:["Space"]},state={jumpFrames:0,startTime:performance.now()},start=async function(){console.log("[Start] Starting...");const t=this.addLevel({id:"test0"});t.addObject({width:this.width,height:this.height,draw:function(t){t.fillStyle="black",t.fillRect(0,0,this.width,this.height)}}),t.addObject({width:32,height:32,position:{x:32,y:32},controllable:!0,draw:function(t){t.fillStyle="red",t.fillRect(this.position.x,this.position.y,this.width,this.height)}}),await this.loadLevel("test0"),console.log("[Start] Done âœ…")},update=function(t){const e=performance.now();console.log(`[Update] New tick after ${e-this.state.startTime} ms`),console.log("Actions:",this.state.actions),this.state.actions.includes("jump")?this.state.jumpFrames++:this.state.jumpFrames>0&&(console.log(`Jumped for ${this.state.jumpFrames} ticks`),this.state.jumpFrames=0);const s=this.state.level.objects.filter((t=>t.controllable));for(const t of s)if(this.state.actions.includes("left")||this.state.actions.includes("right")||this.state.actions.includes("up")||this.state.actions.includes("down")){console.log("Old position:",t.position);let e=t.position.x,s=t.position.y;const i=5;this.state.actions.includes("left")&&(e-=i),this.state.actions.includes("right")&&(e+=i),this.state.actions.includes("up")&&(s-=i),this.state.actions.includes("down")&&(s+=i),t.position={x:Math.max(0,Math.min(e,this.width-t.width)),y:Math.max(0,Math.min(s,this.height-t.height))},console.log("New position:",t.position)}this.state.startTime=e,console.log("[Update] Done âœ…")},game=new GEM.Game(start,update,[],{tickRate:60,actions:actions,state:state}),buttonPlay=document.querySelector(".load-game");buttonPlay.addEventListener("click",(()=>{buttonPlay.remove(),game.play()}));const buttonPause=document.querySelector(".pause-game");buttonPause.addEventListener("click",(()=>game.paused=!game.paused));